# -*- coding: utf-8 -*-
"""S6-Problem3.ipynb

Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1Ai2XrMj9yH5TDgADzZHwW05Ieq6g1Ptp
# """

# !pip install pyomo
# !wget -N -q "https://ampl.com/dl/open/ipopt/ipopt-linux64.zip"
# !unzip -o -q ipopt-linux64
import pyomo.environ as pyo
from pyomo.opt import SolverFactory
 
model = pyo.ConcreteModel()

#Sets
model.i = pyo.Set(initialize = ['VOil','Oil1','Oil0.4'])
#alias Set
model.j = pyo.Set(initialize = model.i)

#Parameters
model.LU = pyo.Param(model.i,initialize = {'VOil':0.75,'Oil1':1,'Oil0.4':1})
LU = model.LU
model.SP = pyo.Param(model.i,initialize = {'VOil':4.45,'Oil1':3.03,'Oil0.4':3.03})
SP = model.SP
model.OC = pyo.Param(model.i,initialize = {'VOil':3.45,'Oil1':2.7,'Oil0.4':2.8})
OC = model.OC
model.PC = pyo.Param(model.i,initialize = {'VOil':0.75,'Oil1':0.15,'Oil0.4':0.15})
PC = model.PC
model.SC = pyo.Param(model.i,initialize = {'VOil':0.02,'Oil1':0.02,'Oil0.4':0.02})
SC = model.SC
model.Y = pyo.Param(model.i,initialize = {'VOil':0.08,'Oil1':0.04,'Oil0.4':0.04})
Y = model.Y
model.RA = pyo.Param(model.i,initialize = {'VOil':350000,'Oil1':750000,'Oil0.4':750000})
RA = model.RA
model.MK = pyo.Param(model.i,initialize = {'VOil':175000,'Oil1':900000,'Oil0.4':750000})
MK = model.MK
model.PS = pyo.Param(model.i,initialize = {'VOil':35000,'Oil1':100000,'Oil0.4':100000})
PS = model.PS

#Decision Variables
model.x = pyo.Var(model.i,domain = pyo.NonNegativeReals)
x = model.x

#Objective Function
def Objective_rule(model,i):
  return sum(x[i]*LU[i]*(SP[i]-(x[i]*LU[i]/(100*RA[i]))) for i in model.i)-sum(x[i]*LU[i]*OC[i] for i in model.i)-sum(x[i]*PC[i] for i in model.i)-sum(x[i]*LU[i]*SC[i]*(1+Y[i]*(x[i]*LU[i]/sum(x[j]*LU[j] for j in model.j))) for i in model.i)
model.Objf = pyo.Objective(rule=Objective_rule,sense = pyo.maximize)

#Constraints
def Constraint1(model,i):
  return sum(x[i]/PS[i] for i in model.i)<=20
model.Const1 = pyo.Constraint(model.i,rule=Constraint1)

def Constraint2(model,i):
  return (x['VOil']/LU['VOil'])-MK['VOil']>=0
model.Const2 = pyo.Constraint(model.i,rule = Constraint2)

def Constraint3(model,i):
  return (x['Oil1']/LU['Oil1'])-MK['Oil1']>=0
model.Const3 = pyo.Constraint(model.i,rule = Constraint3)

def Constraint4(model,i):
  return (x['Oil0.4']/LU['Oil0.4'])-MK['Oil0.4']>=0
model.Const4 = pyo.Constraint(model.i,rule = Constraint4)

Solver = SolverFactory('ipopt',excutable = 'solvers/ipopt.exe')
results = Solver.solve(model)

print(results)
print('Objective Function= ',model.Objf())
for i in model.i:
  print('Units of',i,'Produced = ',x[i]())